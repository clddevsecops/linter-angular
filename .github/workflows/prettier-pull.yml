name: Prettier PR

on:
  pull_request:
  push:
    branches:
      - main

permissions:
  contents: write  # This line gives the workflow write permissions
  pull-requests: write  # This line gives the workflow pull request permissions

jobs:
  prettier:
    runs-on: ubuntu-latest
    env:
      BRANCH_NAME: "feature/prettier-${{ github.sha }}"
    steps:
      # Checkout the code from the repository
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Collect changed files
      - name: Get changed files
        id: files
        run: |
          FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.event.after }} -- 'src/' | grep -E '\.(js|ts|css|scss|html)$' || echo "")
          FILES_CLEANED=$(echo $FILES | xargs)  # Trims and converts newlines to spaces
          echo "FILES=$FILES_CLEANED" >> $GITHUB_ENV
          echo "Changed files: $FILES_CLEANED"  # Debugging: Output the changed files
          if [ -z "$FILES_CLEANED" ]; then
            echo "No files to format."
            echo "has_files=false" >> $GITHUB_OUTPUT
          else
            echo "Files to be formatted: $FILES_CLEANED"
            echo "has_files=true" >> $GITHUB_OUTPUT
          fi

      # Create and checkout to a new feature branch if there are changed files
      - name: Create feature branch
        if: ${{ steps.files.outputs.has_files == 'true' }}
        run: |
          git checkout -b $BRANCH_NAME
          echo "Created and checked out to branch $BRANCH_NAME"
          git branch -vv  # Debugging: Verify the branch tracking information

      # Configure Git user for commits
      - name: Configure Git user
        if: ${{ steps.files.outputs.has_files == 'true' }}
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      # Initial commit to create the branch if there are changed files
      - name: Initial commit
        if: ${{ steps.files.outputs.has_files == 'true' }}
        run: |
          git commit --allow-empty -m "Initial commit for Prettier formatting"
          git push --set-upstream origin $BRANCH_NAME

      # Run Prettier to format code if there are changed files
      - name: Run Prettier
        if: ${{ steps.files.outputs.has_files == 'true' }}
        uses: creyD/prettier_action@v4.3
        with:
          prettier_options: --write ${{ env.FILES }}
          dry: false
        env:
          FILES: ${{ env.FILES }}

      # Verify the branch and commit history after Prettier
      - name: Verify branch and commit history
        if: ${{ steps.files.outputs.has_files == 'true' }}
        run: |
          echo "Current branch: $(git branch --show-current)"
          echo "Last 5 commits:"
          git log --oneline -5
          echo "Branches:"
          git branch -vv
          echo "Remotes:"
          git remote -v

      # Fetch the latest state of the main branch
      - name: Fetch latest main branch
        run: |
          git fetch origin main
          git checkout main
          git pull origin main

      # Checkout the feature branch again
      - name: Checkout feature branch again
        if: ${{ steps.files.outputs.has_files == 'true' }}
        run: |
          git checkout $BRANCH_NAME

      # Create a pull request if there are changed files
      - name: Create Pull Request
        if: ${{ steps.files.outputs.has_files == 'true' }}
        id: create_pr
        uses: peter-evans/create-pull-request@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ env.BRANCH_NAME }}
          base: main  # Ensure the base branch is main
          title: "Apply Prettier formatting"
          body: "This PR applies Prettier formatting to the codebase."
          assignees: "clddevsecops"

      # Notify failure if there are changed files
      - name: Fail Notice
        if: failure()
        run: echo "Prettier formatting failed, check the logs for details."
